#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const source = path.join(__dirname, '..');
const projectName = process.argv[2] ?? 'create-ts-app';
const { program } = require('commander');
const filesToExclude = ['installer', 'node_modules', '.git', '.idea', 'CHANGELOG.md', '.gitignore'];
const packageJson = require(path.join(source, 'package.json'));

program.version(packageJson.version, '-v, --version', 'output the current version');
program.parse(process.argv);

let chalk;

import('chalk').then(module => {
    chalk = module.default;

    printCommandStartupText(chalk);

    const projectPath = path.join(process.cwd(), projectName);

    if (fs.existsSync(projectPath)) {
        console.log();
        console.log(
            chalk.red('Error: Cannot create a new application'),
            chalk.cyan(projectName),
            chalk.red('- a folder with that name already exists (', chalk.cyan(projectPath), ')')
        );

        return;
    }

    copyFolderToSync(source, projectPath);
    modifyPackageJson(chalk);
    createGitignoreFiles(projectPath);
    printCommandSuccessText(chalk);
});

function copyFolderToSync(source, destination)
{
    fs.mkdirSync(destination, {recursive: true});
    fs.readdirSync(source).forEach(element => {
        if (filesToExclude.includes(element)) return;

        if (fs.lstatSync(path.join(source, element)).isFile()) {
            fs.copyFileSync(path.join(source, element), path.join(destination, element));
        } else {
            copyFolderToSync(path.join(source, element), path.join(destination, element));
        }
    });
}

function modifyPackageJson(chalk)
{
    console.log('Updating your apps', chalk.cyan('package.json'));

    delete packageJson['bin'];
    delete packageJson['version'];
    delete packageJson['dependencies']['chalk'];
    delete packageJson['dependencies']['commander'];
    delete packageJson['devDependencies']['@dannyxcii/badger'];

    packageJson.name = projectName;

    fs.writeFileSync(
        path.join(process.cwd(), projectName, 'package.json'),
        JSON.stringify(packageJson, null, 2)
    );
}

function printCommandStartupText(chalk)
{
    console.log();
    console.log(chalk.magenta('Executing @dannyxcii/create-modula-app installer'));
    console.log();
    console.log('Creating your new Modula app:', chalk.cyan(projectName));
    console.log('Setting up project directory at', chalk.cyan(path.join(process.cwd(), projectName)));
}

function printCommandSuccessText(chalk)
{
    console.log();
    console.log(chalk.greenBright('Success: Application Created'));
    console.log(chalk.italic('Now run:', chalk.yellow(`cd ${projectName} && npm install && npm run dev`)));
}

function createGitignoreFiles(destination)
{
    const baseGitignoreContent = "/.idea\n/node_modules";
    const assetsGitignoreContent = "/*\n!.gitignore";

    fs.writeFileSync(path.join(destination, '.gitignore'), baseGitignoreContent.trim());
    fs.writeFileSync(path.join(destination, 'public/assets', '.gitignore'), assetsGitignoreContent.trim());
}